/*
** This example follow Chad Fulton's simple RBC model.
** For this example we will calibrate the following variables:
**     Discount Rate
**     Disutility Rate
**     Depreciation Rate
**     Capital share
** We estimate the remaining variables using MLE:
*      Measurement variances [3]
**     Technology shock persistence
**     Technology shock variance
**
**/

new;
library tsmt, cmlmt, ssdev;

// Load the data
lpath = "D:/development/GitHub/gauss_blog/time_series/real-business-cycle-7-22/data/";
rbc_data = loadd(lpath $+ "rbc_data.csv");

// Calibrate parameter values
discount_rate = 0.95;
disutility_labor = 3;
depreciation_rate = 0.025;
capital_share = 0.36;

// Create dataframe to store calibrated parameters
calibrated_params = asdf(discount_rate~disutility_labor~depreciation_rate~capital_share, 
                          "Discount", "Disutility", "Depreciation", "Capital Share");

// Model size
k_states = 2;
k_posdef = 1;
k_endog = 3;
k_predetermined = 1;

// Starting values of params
params = zeros(5, 1);
// Measurement variances
params[1:3] = ones(3, 1)*0.3;

// Technology shock persistence
params[4] = 0.85;

// Technology shock variance
params[5] = 0.04^2;

{design_mat, transition_mat} = solveRBC(params, calibrated_params, k_states, k_predetermined);

proc (3)  = logLinearize(params, calibrate_params);
    local tmp, theta, _gamma, _zeta, A, B, C;
    
    
    tmp = (1/calibrate_params[., "Discount"] - (1 - depreciation_rate));
    theta = (calibrate_params[., "Capital Share"]/tmp)^(1/(1 - calibrate_params[., "Capital Share"]));
    _gamma = 1. - calibrated_params[., "Depreciation"] * theta^(1 - calibrate_params[., "Capital Share"]);
    _zeta = calibrated_params[., "Capital Share"] * calibrated_params[. , "Discount"] * theta^(calibrate_params[., "Capital Share"] - 1);
    
    // Coefficient matrices
    A = eye(2);
    B = zeros(2, 2);
    C = zeros(2,1);
    B[1,1] = 1 + calibrated_params[., "Depreciation"] * (_gamma / (1 - _gamma));
    B[1,2] =  (-calibrated_params[., "Depreciation"] *
        (1 - calibrated_params[., "Capital Share"] + _gamma * calibrated_params[., "Capital Share"]) /
        (calibrated_params[., "Capital Share"] * (1 - _gamma)));
    B[2,1] = 0;
    B[2,2] = calibrated_params[., "Capital Share"] / (_zeta + calibrated_params[., "Capital Share"]*(1 - _zeta));
    
    C[1] = depreciation_rate / (calibrated_params[., "Capital Share"] * (1 - _gamma));
    C[2] = (_zeta * params[4] /
        (_zeta + calibrated_params[., "Capital Share"]*(1 - _zeta)));
    
    retp(A, B, C);
endp;


proc (2) = solveRBC( params, calibrated_params, k_states, k_predetermined);
local A, B, C, eigvals, r_eigvecs, l_eigvecs, idx, decoupled_C, k,
     policy_state, policy_shock, transition_state, transition_shock,
     design_mat, transition_mat, k_nonpredetermined;
    
    // Log-linearize model
    { A, B, C } = logLinearize(params, calibrated_params);
    
    // Jordan decomposition
    { eigvals, r_eigvecs } = eigv(B');
    l_eigvecs = r_eigvecs';
    
    // Order eigvecs in ascending value
    idx = sortind(eigvals);
    eigvals = eigvals[idx];
    l_eigvecs = eigvals[idx, .];
    
    k_nonpredetermined = checkBlanchardKhan(k_states, k_predetermined, eigvals);
    
    // Indices for partitioning
    k = k_predetermined + 1;
    
    decoupled_C = dot(l_eigvecs, C);
    
    // Explosive components
    local tmp;
    tmp = inv(l_eigvecs[k:rows(l_eigvecs), k:cols(l_eigvecs)]); 
    
    // Generate policy state
    policy_state = squeeze(dot(tmp), l_eigvecs[k:rows(l_eigvecs), 1:k]);
    
    // Generate policy shock
    local tmp1, tmp2, tmp3;
    tmp1 = dot(tmp, 1/eigvals[k:rows(l_eigvecs), k:cols(l_eigvecs)]);
    tmp2 = inv(eye(k_nonpredetermined) -
               params[4] / eigvals[k:rows(l_eigvecs), k:cols(l_eigvecs)]);
    tmp3 = dot(tmp1, tmp2);
    policy_shock = squeeze(dot(tmp3, decoupled_C[k:rows(decoupled_C)]));
    
    // Transition
    transition_state = squeeze(B[1:k, 1:k] + dot(B[1:k, k:cols(B)], policy_state));
    transition_shock = squeeze(dot(B[1:k, k:cols(B)], policy_shock) + C[1:k, 1:k]);         
    
    // Design matrix
    tmp = (1 - calibrated_params[., "Capital Share"])/calibrated_params[., "Capital Share"];
    tmp1 = 1/calibrated_params[., "Capital Share"];
    
    local d11, d12, d21, d22;
    d11 = 1 - tmp*policy_state;
    d12 = tmp1 - tmp*policy_shock;
    d21 = 1 - tmp1 * policy_state;
    d22 = tmp1 * (1-policy_shock);
    design_mat = (d11~d12)|(d21~d22);
    
    // Transition matrix
    transition_mat = (transition_state~transition_shock)|(0~params[4]);
    
    retp(design_mat, transition_mat);
endp;

proc (1) = checkBlanchardKhan(k_states, k_predetermined, eigvals);
    local k_nonpredetermined, k_stable, k_unstable;
    
    k_nonpredetermined = k_states - k_predetermined;
    k_stable = sumc(diag(eigvals)<1);
    k_unstable = k_states - k_stable;
    
    if k_stable == k_predetermined;
        errorlogat "Blanchard-Khan conditions not met. No unique solution";
    endif;
    
    retp(k_nonpredetermined);
endp;

    
